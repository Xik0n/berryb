import disnake
from disnake.ext import commands
from pymongo import MongoClient
from disnake.ext.commands.cooldowns import BucketType
import random
import asyncio
from glQiwiApi import QiwiP2PClient
import datetime
from datetime import timedelta

cluster = MongoClient("mongodb+srv://xikon:joker12340000@cluster0.bvfeu4r.mongodb.net/?retryWrites=true&w=majority")
productDB = cluster['product']
DBtype = productDB['hands']
DBproduct = productDB['product']
DBprice = productDB['price']
DBdates = productDB['dates']

serverBD = cluster['server']
dbcode = productDB['code']
active_threads= serverBD['threads']
synced_threads = serverBD['synced_threads']
servers = serverBD['servers']

qiwiDB = cluster['qiwi']
qiwi_base = qiwiDB['qiwi']

paintersDB = cluster['painters']
stars = paintersDB['rating']
orders = paintersDB['orders']
painter = paintersDB['paintersinfo']


listsdb = cluster['lists']
thread_messages_coll = listsdb['thread_messages']
send_to_target_coll = listsdb['send_to_target']

SECRET_KEY = "eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6InE0M3NiZC0wMCIsInVzZXJfaWQiOiI3OTE2Nzc1NTk3MCIsInNlY3JldCI6ImIzMDRmMzBiMWE1YjgwOGVkYTM1YzJiNmEyNjhjOWZjNjM4MjZkNmVlYjgxMTk5ZDU4NjAwNzhjMGNmNWZjMzgifX0="
p2p = QiwiP2PClient(secret_p2p=SECRET_KEY, shim_server_url="http://bretail.space/proxy/p2p/")

class SteveOrAlexHands(disnake.ui.View): #–¢—Ä–∏ –∫–Ω–æ–ø–∫–∏: –ù–∞–∑–∞–¥, –®–∏—Ä–æ–∫–∏–µ, –¢–æ–Ω–∫–∏–µ
    def __init__(self):
        super().__init__()
    
    @disnake.ui.button(label='–ù–∞–∑–∞–¥', style=disnake.ButtonStyle.red, emoji='<:1046539994682097754:1072938078617993247>')
    async def _backbutton_(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.message.delete()
        await inter.send(embed = disnake.Embed(title='–í—ã–±–æ—Ä —É—Å–ª—É–≥–∏', description='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.'), view=Products())
    
    @disnake.ui.button(label='–®–∏—Ä–æ–∫–∏–µ', style=disnake.ButtonStyle.gray)
    async def wide(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        DBtype.update_one({'_id': inter.author.id}, {'$set': {'—Ä—É–∫–∏': "–®–∏—Ä–æ–∫–∏–µ"}}, upsert=True)
        embed = disnake.Embed(title='–î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª—è üåà')
        await inter.message.delete()
        await inter.send(embed=embed, view=SkinStyles())
    
    @disnake.ui.button(label='–¢–æ–Ω–∫–∏–µ', style=disnake.ButtonStyle.gray)
    async def _alex_(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        DBtype.update_one({'_id': inter.author.id}, {'$set': {'—Ä—É–∫–∏': "–¢–æ–Ω–∫–∏–µ"}}, upsert=True)
        embed = disnake.Embed(title='–î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª—è üåà')
        await inter.message.delete()
        await inter.send(embed=embed, view=SkinStyles())

class Ordering(disnake.ui.View): #–î–≤–µ –∫–Ω–æ–ø–∫–∏: –ù–∞–∑–∞–¥, –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
    def __init__(self):
        super().__init__()

    @disnake.ui.button(label='–ù–∞–∑–∞–¥', style=disnake.ButtonStyle.red, emoji='<:1046539994682097754:1072938078617993247>')
    async def _backbutton_(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.message.delete()
        await inter.send(embed = disnake.Embed(title='–í—ã–±–æ—Ä —É—Å–ª—É–≥–∏', description='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.'), view=Products())


    @disnake.ui.button(label='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', style=disnake.ButtonStyle.green, custom_id='makebuy', emoji='<:yes:1072938130199552030>')
    async def __ofromzakaz__(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        product = DBproduct.find_one({"_id": inter.author.id})['—Ç–æ–≤–∞—Ä']
        description=f'–¢–æ–≤–∞—Ä ‚Äî `{product}`\n\n–û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —á–∞—Ç, —Ç–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ –¥–µ—Å—è—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ png, jpg, jpeg, webp, gif.'
        if product == '–°–∫–∏–Ω ¬´ Classic ¬ª' or product == "–°–∫–∏–Ω ¬´ Modern ¬ª":
            hands = DBtype.find_one({"_id": inter.author.id})['—Ä—É–∫–∏']
            description = f'–¢–æ–≤–∞—Ä ‚Äî `{product}`\n–†—É–∫–∏ ‚Äî `{hands}`\n\n–û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —á–∞—Ç, —Ç–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ –¥–µ—Å—è—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ png, jpg, jpeg, webp, gif.'
        embed = disnake.Embed(title='üí≠ –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã –≤–∏–¥–∏—à—å —Å–≤–æ–π –±—É–¥—É—â–∏–π –∑–∞–∫–∞–∑.', description=description)
        await inter.message.delete()
        await inter.send(embed=embed, view=Cancel())
        thread_messages_coll.update_one({'_id': inter.channel.id}, {"$set": {"value": 1}}, upsert=True)

class OrderingForSkins(disnake.ui.View): #–î–≤–µ –∫–Ω–æ–ø–∫–∏: –ù–∞–∑–∞–¥, –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
    def __init__(self):
        super().__init__()

    @disnake.ui.button(label='–ù–∞–∑–∞–¥', style=disnake.ButtonStyle.red, emoji='<:1046539994682097754:1072938078617993247>')
    async def _backbutton_(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        embed = disnake.Embed(title='–î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª—è üåà')
        await inter.message.delete()
        await inter.send(embed=embed, view=SkinStyles())


    @disnake.ui.button(label='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', style=disnake.ButtonStyle.green, custom_id='makebuy', emoji='<:yes:1072938130199552030>')
    async def __ofromzakaz__(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        product = DBproduct.find_one({"_id": inter.author.id})['—Ç–æ–≤–∞—Ä']
        description=f'–¢–æ–≤–∞—Ä ‚Äî `{product}`\n\n–û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —á–∞—Ç, —Ç–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ –¥–µ—Å—è—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ png, jpg, jpeg, webp, gif.'
        if product == '–°–∫–∏–Ω ¬´ Classic ¬ª' or product == "–°–∫–∏–Ω ¬´ Modern ¬ª" or product == '–°–∫–∏–Ω ¬´ Future ¬ª':
            hands = DBtype.find_one({"_id": inter.author.id})['—Ä—É–∫–∏']
            description = f'–¢–æ–≤–∞—Ä ‚Äî `{product}`\n–†—É–∫–∏ ‚Äî `{hands}`\n\n–û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —á–∞—Ç, —Ç–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ –¥–µ—Å—è—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ png, jpg, jpeg, webp, gif.'
        embed = disnake.Embed(title='üí≠ –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã –≤–∏–¥–∏—à—å —Å–≤–æ–π –±—É–¥—É—â–∏–π –∑–∞–∫–∞–∑.', description=description)
        await inter.message.delete()
        await inter.send(embed=embed, view=Cancel())
        thread_messages_coll.update_one({'_id': inter.channel.id}, {"$set": {"value": 1}}, upsert=True)

class Cancel(disnake.ui.View): #–î–≤–µ –∫–Ω–æ–ø–∫–∏: Modern –∏ Classic
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label='–û—Ç–º–µ–Ω–∞', style=disnake.ButtonStyle.red, emoji='<:1046539994682097754:1072938078617993247>')
    async def _backbutton_(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        await inter.message.delete()
        await inter.send(embed = disnake.Embed(title='–í—ã–±–æ—Ä —É—Å–ª—É–≥–∏', description='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.'), view=Products())
        try: 
            thread_messages_coll.delete_one({"_id": inter.channel.id})
        except:
            pass

class SkinStyles(disnake.ui.View): #–î–≤–µ –∫–Ω–æ–ø–∫–∏: Future –∏ Classic –∏ Modern
    def __init__(self):
        super().__init__(timeout=None)
    
    @disnake.ui.button(label='–ù–∞–∑–∞–¥', style=disnake.ButtonStyle.red, emoji='<:1046539994682097754:1072938078617993247>')
    async def _backbutton_(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        embed = disnake.Embed(title='–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–∏–¥ —Ä—É–∫ üëã', description='–ö–∞–∫–∏–µ —Ä—É–∫–∏ —Ç—ã —Ö–æ—á–µ—à—å? –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞–∫ –Ω–∞ –ø–µ—Ä–≤–æ–º –ø—Ä–∏–º–µ—Ä–µ, –∏–ª–∏ –Ω–∞ –ø–∞—Ä—É –ø–∏–∫—Å–µ–ª–µ–π –º–µ–Ω—å—à–µ, –∫–∞–∫ –Ω–∞ –≤—Ç–æ—Ä–æ–º?', color=0xFFC200)
        embed.set_image(url='https://media.discordapp.net/attachments/991705191978115132/1125973610302017568/Frame_770_2.png?width=852&height=528')
        await inter.message.delete()
        await inter.send(embed=embed, view=SteveOrAlexHands())

    @disnake.ui.button(label='Classic', style=disnake.ButtonStyle.green, custom_id='classic')
    async def classic(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        embed = disnake.Embed(title='–°–∫–∏–Ω ¬´ Classic ¬ª', description='–ö–ª–∞—Å—Å–∏–∫–∞ –æ—Ç –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ ‚Äî —Å–∫–∏–Ω, –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–µ–ª–∏—Ç –≤–∞—Å –∏–∑ —Ç–æ–ª–ø—ã –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –¥–æ–±–∞–≤–∏—Ç –∫—Ä–∞—Å–æ–∫ –≤ –∏–≥—Ä—É.', color=0xFFC200)
        embed.set_image(url='https://media.discordapp.net/attachments/991705191978115132/1126108839754866698/Frame_871_1.png?width=528&height=528')
        await inter.message.delete()
        await inter.send(embed=embed, view=OrderingForSkins()) 
        DBproduct.update_one({'_id': inter.author.id}, {'$set': {'—Ç–æ–≤–∞—Ä': "–°–∫–∏–Ω ¬´ Classic ¬ª"}}, upsert=True)
        DBprice.update_one({'_id': inter.author.id}, {'$set': {'—Ü–µ–Ω–∞': "155"}}, upsert=True)

    @disnake.ui.button(label='Future', style=disnake.ButtonStyle.green, custom_id='future')
    async def future(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        embed = disnake.Embed(title='–°–∫–∏–Ω ¬´ Future ¬ª', description='–°–∫–∏–Ω –±—É–¥—É—â–µ–≥–æ, –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Å–æ—á–Ω—ã—Ö –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–∞—Ö. –¢–∞–∫–æ–π —Å—Ç–∏–ª—å –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–µ–¥–∏–π–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞.', color=0xFFC200)
        embed.set_image(url='https://media.discordapp.net/attachments/991705191978115132/1126108838983127102/Frame_873_1.png?width=528&height=528')
        await inter.message.delete()
        await inter.send(embed=embed, view=OrderingForSkins()) 
        DBproduct.update_one({'_id': inter.author.id}, {'$set': {'—Ç–æ–≤–∞—Ä': "–°–∫–∏–Ω ¬´ Future ¬ª"}}, upsert=True)
        DBprice.update_one({'_id': inter.author.id}, {'$set': {'—Ü–µ–Ω–∞': "155"}}, upsert=True)

    @disnake.ui.button(label='Modern', style=disnake.ButtonStyle.green, custom_id='modern')
    async def modern(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        embed = disnake.Embed(title='–°–∫–∏–Ω ¬´ Modern ¬ª', description='–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ —è—Ä–∫–∏–π ‚Äî —ç—Ç–æ –ø—Ä–æ —ç—Ç–æ—Ç —Å—Ç–∏–ª—å. –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–∫–∏–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–æ–ª–Ω–µ–Ω –¥–µ—Ç–∞–ª—è–º–∏, –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω –ø–æ –≤–∞—à–µ–º—É —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é.', color=0xFFC200)
        embed.set_image(url='https://media.discordapp.net/attachments/991705191978115132/1126108839364792330/Frame_872_1.png?width=528&height=528')
        await inter.message.delete()
        await inter.send(embed=embed, view=OrderingForSkins()) 
        DBproduct.update_one({'_id': inter.author.id}, {'$set': {'—Ç–æ–≤–∞—Ä': "–°–∫–∏–Ω ¬´ Modern ¬ª"}}, upsert=True)
        DBprice.update_one({'_id': inter.author.id}, {'$set': {'—Ü–µ–Ω–∞': "155"}}, upsert=True)

class Products(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)   

    @disnake.ui.button(label='–°–∫–∏–Ω', style=disnake.ButtonStyle.green, emoji='<:Frame7833:1121710630047596665>', row=1, custom_id='skin', disabled=False)
    async def _skin_(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        embed = disnake.Embed(title='–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–∏–¥ —Ä—É–∫ üëã', description='–ö–∞–∫–∏–µ —Ä—É–∫–∏ —Ç—ã —Ö–æ—á–µ—à—å? –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞–∫ –Ω–∞ –ø–µ—Ä–≤–æ–º –ø—Ä–∏–º–µ—Ä–µ, –∏–ª–∏ –Ω–∞ –ø–∞—Ä—É –ø–∏–∫—Å–µ–ª–µ–π –º–µ–Ω—å—à–µ, –∫–∞–∫ –Ω–∞ –≤—Ç–æ—Ä–æ–º?', color=0xFFC200)
        embed.set_image(url='https://media.discordapp.net/attachments/991705191978115132/1125973610302017568/Frame_770_2.png?width=852&height=528')
        await inter.message.delete()
        await inter.send(embed=embed, view=SteveOrAlexHands())

    @disnake.ui.button(label='–¢–æ—Ç–µ–º', style=disnake.ButtonStyle.green, emoji='<:Frame7863:1121710640998928424>', row=1, custom_id='totem')
    async def _totem_(self, button: disnake.ui.Button, inter: disnake.MessageInteraction): 
        embed = disnake.Embed(title='–¢–æ—Ç–µ–º 3D', description='–ú–æ–¥–µ–ª—å, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –≤ —Ö–∞–π–ø–æ–≤–æ–º —Å—Ç–∏–ª–µ,\n–∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–æ—Ç–µ–º –≤\nMinecraft –∏ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª—è –∏–≥—Ä–µ.', color=0xFFC200)
        embed.set_image(url='https://media.discordapp.net/attachments/991705191978115132/1126108841789104178/Frame_874_1.png?width=528&height=528')
        await inter.message.delete()
        await inter.send(embed=embed, view=Ordering())
        DBprice.update_one({'_id': inter.author.id}, {'$set': {'—Ü–µ–Ω–∞': "25"}}, upsert=True)
        DBproduct.update_one({'_id': inter.author.id}, {'$set': {'—Ç–æ–≤–∞—Ä': "–¢–æ—Ç–µ–º"}}, upsert=True)  
    
    @disnake.ui.button(label='–ü–ª–∞—â', style=disnake.ButtonStyle.green, emoji='<:Frame7823:1121710634002808873>', row=1, custom_id='oformleinie')
    async def _oformelie_(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        embed = disnake.Embed(title='–ü–ª–∞—â', description='–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—â, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ —è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–æ–º.', color=0xFFC200)
        embed.set_image(url='https://media.discordapp.net/attachments/991705191978115132/1126108840165920818/Frame_870_1.png?width=528&height=528')
        await inter.message.delete()
        await inter.send(embed=embed, view=Ordering())
        DBprice.update_one({'_id': inter.author.id}, {'$set': {'—Ü–µ–Ω–∞': "50"}}, upsert=True)
        DBproduct.update_one({'_id': inter.author.id}, {'$set': {'—Ç–æ–≤–∞—Ä': "–ü–ª–∞—â"}}, upsert=True)

    @disnake.ui.button(label='GIF-–ê–≤–∞—Ç–∞—Ä', style=disnake.ButtonStyle.green, row=2, emoji='<:Frame7813:1121710637572161617>', custom_id='gifavatar')
    async def _gifavatar_(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        embed = disnake.Embed(title='GIF –ê–≤–∞—Ç–∞—Ä Minecraft', description='–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à —Å–∫–∏–Ω —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å Discord –Ω–∏—Ç—Ä–æ –∏–ª–∏ Telegram Premium*.', color=0xFFC200)
        embed.set_image(url='https://media.discordapp.net/attachments/991705191978115132/1126108840606306304/Frame_869_1.png?width=528&height=528')
        await inter.message.delete()
        await inter.send(embed=embed, view=Ordering())
        DBprice.update_one({'_id': inter.author.id}, {'$set': {'—Ü–µ–Ω–∞': "110"}}, upsert=True)
        DBproduct.update_one({'_id': inter.author.id}, {'$set': {'—Ç–æ–≤–∞—Ä': "GIF-–ê–≤–∞—Ç–∞—Ä"}}, upsert=True)  
    
    @disnake.ui.button(label='–ê–≤–∞—Ç–∞—Ä', style=disnake.ButtonStyle.green, emoji='<:Frame7803:1121710646552186931>', row=2, custom_id='avatar')
    async def _avatar_(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        embed = disnake.Embed(title='–ê–≤–∞—Ç–∞—Ä Minecraft', description='–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –≤ —Å—Ç–∏–ª–µ Minecraft –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Discord, –í–∫–æ–Ω—Ç–∞–∫—Ç–µ, –Æ—Ç—É–± –∏ –ª—é–±—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏—Ç—è–≥–∏–≤–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ.', color=0xFFC200)
        embed.set_image(url='https://media.discordapp.net/attachments/991705191978115132/1126108842267267082/Frame_868_1.png?width=528&height=528')
        await inter.message.delete()
        await inter.send(embed=embed, view=Ordering())
        DBprice.update_one({'_id': inter.author.id}, {'$set': {'—Ü–µ–Ω–∞': "40"}}, upsert=True)
        DBproduct.update_one({'_id': inter.author.id}, {'$set': {'—Ç–æ–≤–∞—Ä': "–ê–≤–∞—Ç–∞—Ä"}}, upsert=True)

class Navigation(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        bot.cd_map = commands.CooldownMapping.from_cooldown(1, 10, commands.BucketType.member)
        self.rating = {}
    
    @commands.Cog.listener()
    async def on_message(self, message):
        if isinstance(message.channel, disnake.Thread) and message.channel.parent_id == 1126113100928663562:
            if not message.author.bot:
                message_channel_find = thread_messages_coll.find_one({"_id": message.channel.id})
                if message_channel_find is None:
                    return
                else:
                    value = message_channel_find['value']
                    if not message.author.bot and int(value) == 1:
                        product = DBproduct.find_one({"_id": message.author.id})['—Ç–æ–≤–∞—Ä']
                        summa = DBprice.find_one({'_id': message.author.id})['—Ü–µ–Ω–∞']
                        old_url_find = qiwi_base.find_one({"_id": message.author.id})
                        if old_url_find is not None:
                            bill_find = old_url_find['bill_id']
                            try:
                                await p2p.reject_p2p_bill(bill_id=bill_find)
                            except:
                                pass
                        new_bill = await p2p.create_p2p_bill(bill_id=random.randint(10000000, 9999999999), amount=int(summa), comment=f'–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ ‚Äî\n–ö–ª–∏–µ–Ω—Ç: {message.author}\n–¢–æ–≤–∞—Ä: {product}', theme_code="Egor-TsD9p1Nh-7j")
                        shim_url = p2p.create_shim_url(new_bill)
                        qiwi_base.update_many({'_id': message.author.id}, {'$set': {'bill_id': str(new_bill.id), 'pay_url': str(shim_url)}}, upsert=True)
                        embed = disnake.Embed(description=f'–û—Ç–ª–∏—á–Ω–æ, –∑–∞–∫–∞–∑ –ø–æ—á—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏—Ç—å!\n–° –í–∞—Å ``{summa}`` —Ä—É–±–ª–µ–π, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã —Å—Ä–∞–∑—É –Ω–∞—á–Ω–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤–∞—à –∑–∞–∫–∞–∑.')
                        await message.reply(embed=embed, components=[
                            disnake.ui.Button(label='–û–ø–ª–∞—Ç–∏—Ç—å', style=disnake.ButtonStyle.url, url=f'{shim_url}'),
                            disnake.ui.Button(label='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', style=disnake.ButtonStyle.blurple, custom_id='check')
                        ], mention_author=False)
                        thread_messages_coll.update_one({"_id": message.channel.id}, {"$set": {'value': 0}})
        
        if not message.author.bot:
            product_doc = DBproduct.find_one({"_id": message.author.id})
            if product_doc:
                source_channel_id = 1126113100928663562
                target_channel_id = 1124389034131730492
                source_channel = self.bot.get_channel(source_channel_id)
                target_channel = self.bot.get_channel(target_channel_id)
                source_thread = next((t for t in source_channel.threads if t.id == message.channel.id), None)
                target_thread = next((t for t in target_channel.threads if t.id == message.channel.id), None)
                if source_thread:
                    synced_thread = synced_threads.find_one({"source_thread_id": source_thread.id})
                    if synced_thread:
                        target_thread_id = synced_thread["target_thread_id"]
                        target_thread = target_channel.get_thread(target_thread_id)
                        if target_thread:
                            if message.content:
                                vl = send_to_target_coll.find_one({"msg": message.channel.id})['value']
                                if int(vl) == 0:
                                    product = DBproduct.find_one({"_id": message.author.id})['—Ç–æ–≤–∞—Ä']
                                    hands_doc = DBtype.find_one({"_id": message.author.id})
                                    if hands_doc:
                                        hands = hands_doc['—Ä—É–∫–∏']                                      
                                        current_date = datetime.datetime.now()
                                        due_date = current_date + datetime.timedelta(days=5)
                                        formatted_date = f"{due_date.day}.{due_date.month:02d}.{due_date.year} {due_date.hour:02d}:{due_date.minute:02d}"
                                        if product in ['–¢–æ—Ç–µ–º', '–ê–≤–∞—Ç–∞—Ä', '–ü–ª–∞—â', 'GIF-–ê–≤–∞—Ç–∞—Ä']:
                                            msg = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{product}\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {message.content}\n\n–°–¥–∞—Ç—å –¥–æ {formatted_date}"
                                        else:
                                            msg = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{product}\n{hands} —Ä—É–∫–∏\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {message.content}\n\n–°–¥–∞—Ç—å –¥–æ {formatted_date}"
                                        await target_thread.send(msg)
                                        DBdates.update_one({"_id": message.author.id}, {"$set": {'date': str(formatted_date)}}, upsert=True)
                                        send_to_target_coll.update_one({"msg": message.channel.id}, {"$set": {'value': 1}}, upsert=True)
                                        for attachment in message.attachments:
                                            file = await attachment.to_file()
                                            await target_thread.send(file=file)
                                    else:
                                        current_date = datetime.datetime.now()
                                        due_date = current_date + datetime.timedelta(days=5)
                                        formatted_date = f"{due_date.day}.{due_date.month:02d}.{due_date.year} {due_date.hour:02d}:{due_date.minute:02d}"
                                        if product in ['–¢–æ—Ç–µ–º', '–ê–≤–∞—Ç–∞—Ä', '–ü–ª–∞—â', 'GIF-–ê–≤–∞—Ç–∞—Ä']:
                                            msg = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{product}\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {message.content}\n\n–°–¥–∞—Ç—å –¥–æ {formatted_date}"
                                        else:
                                            msg = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{product}\n{hands} —Ä—É–∫–∏\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {message.content}\n\n–°–¥–∞—Ç—å –¥–æ {formatted_date}"
                                        await target_thread.send(msg)
                                        DBdates.update_one({"_id": message.author.id}, {"$set": {'date': str(formatted_date)}}, upsert=True)
                                        send_to_target_coll.update_one({"msg": message.channel.id}, {"$set": {'value': 1}}, upsert=True)
                                        for attachment in message.attachments:
                                            file = await attachment.to_file()
                                            await target_thread.send(file=file)
                                else:
                                    await target_thread.send(f"{message.content}")
                                    for attachment in message.attachments:
                                        file = await attachment.to_file()
                                        await target_thread.send(file=file)
                            
                            else:
                                vl = send_to_target_coll.find_one({"msg": message.channel.id})['value']
                                if int(vl) == 0:
                                    product = DBproduct.find_one({"_id": message.author.id})['—Ç–æ–≤–∞—Ä']
                                    hands_doc = DBtype.find_one({"_id": message.author.id})
                                    if hands_doc:
                                        hands = hands_doc['—Ä—É–∫–∏']  
                                        current_date = datetime.datetime.now()
                                        due_date = current_date + datetime.timedelta(days=5)
                                        formatted_date = f"{due_date.day}.{due_date.month:02d}.{due_date.year} {due_date.hour:02d}:{due_date.minute:02d}"
                                        if product in ['–¢–æ—Ç–µ–º', '–ê–≤–∞—Ç–∞—Ä', '–ü–ª–∞—â', 'GIF-–ê–≤–∞—Ç–∞—Ä']:
                                            msg = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{product}\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {message.content}\n\n–°–¥–∞—Ç—å –¥–æ {formatted_date}"
                                        else:
                                            msg = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{product}\n{hands} —Ä—É–∫–∏\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {message.content}\n\n–°–¥–∞—Ç—å –¥–æ {formatted_date}"
                                        await target_thread.send(msg)
                                        DBdates.update_one({"_id": message.author.id}, {"$set": {'date': str(formatted_date)}}, upsert=True)
                                        send_to_target_coll.update_one({"msg": message.channel.id}, {"$set": {'value': 1}}, upsert=True)
                                        for attachment in message.attachments:
                                            file = await attachment.to_file()
                                            await target_thread.send(file=file)
                                    else:
                                        current_date = datetime.datetime.now()
                                        due_date = current_date + datetime.timedelta(days=5)
                                        formatted_date = f"{due_date.day}.{due_date.month:02d}.{due_date.year} {due_date.hour:02d}:{due_date.minute:02d}"
                                        if product in ['–¢–æ—Ç–µ–º', '–ê–≤–∞—Ç–∞—Ä', '–ü–ª–∞—â', 'GIF-–ê–≤–∞—Ç–∞—Ä']:
                                            msg = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{product}\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {message.content}\n\n–°–¥–∞—Ç—å –¥–æ {formatted_date}"
                                        else:
                                            msg = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\n{product}\n{hands} —Ä—É–∫–∏\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {message.content}\n\n–°–¥–∞—Ç—å –¥–æ {formatted_date}"
                                        await target_thread.send(msg)
                                        DBdates.update_one({"_id": message.author.id}, {"$set": {'date': str(formatted_date)}}, upsert=True)
                                        send_to_target_coll.update_one({"msg": message.channel.id}, {"$set": {'value': 1}}, upsert=True)
                                        for attachment in message.attachments:
                                            file = await attachment.to_file()
                                            await target_thread.send(file=file)
                                else:
                                    for attachment in message.attachments:
                                        file = await attachment.to_file()
                                        await target_thread.send(file=file)

                elif target_thread:
                    synced_thread = synced_threads.find_one({"target_thread_id": target_thread.id})
                    if synced_thread:
                        source_thread_id = synced_thread["source_thread_id"]
                        source_thread = source_channel.get_thread(source_thread_id)
                        if source_thread:
                            if message.content:
                                await source_thread.send(f"{message.content}")
                            for attachment in message.attachments:
                                file = await attachment.to_file()
                                await source_thread.send(file=file)

    @commands.Cog.listener()
    async def on_thread_create(self, thread):
        if thread.parent_id == 1126113100928663562:
            target_channel_id = 1124389034131730492
            target_channel = self.bot.get_channel(target_channel_id)
            channel = self.bot.get_channel(1124389034131730492)
            existing_thread = disnake.utils.get(channel.threads, name=thread.name)
            if existing_thread is not None:
                await existing_thread.delete()
            created_thread = await target_channel.create_thread(name=thread.name, type=disnake.ChannelType.private_thread)
            synced_threads.update_one({"source_thread_id": thread.id}, {"$set": {"target_thread_id": created_thread.id}}, upsert=True)
            send_to_target_coll.update_one({"msg": thread.id}, {"$set": {'value': 0}}, upsert=True)
    
    @commands.slash_command(name='–æ–ø–ª–∞—Ç–∏—Ç—å', description='–æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É')
    @commands.has_any_role(989929544704196618, 989527988959842345, 1061266758180286514, 1124021579702079588, 1124021498097704972)
    async def paid(self, inter, user: disnake.Member = commands.Param(name='—É—á–∞—Å—Ç–Ω–∏–∫', description='–≤—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞')):
        base_doc = qiwi_base.find_one({"_id": user.id})
        if base_doc is not None:
            try:
                await inter.author.add_roles(inter.author.guild.get_role(989527992109789218))
                await inter.author.send("–ü—Ä–∏–≤–µ—Ç! –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–≤–æ–∏–º –∑–∞–∫–∞–∑–æ–º ü•≥\nüëâ –ê —á—Ç–æ –±—ã –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–µ –∫–∞–∑–∞–ª–æ—Å—å –¥–æ–ª–≥–∏–º ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —á–∞—Ç (<#989528054441328720>)!")
            except:
                pass
            await inter.send('–ì–æ—Ç–æ–≤–æ!', ephemeral=True)
            
            await inter.channel.send(embed=disnake.Embed(description='–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–ú—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.', color=0x52FF00))
            else_artist = self.bot.get_user(986815186629455902)
            skin = DBproduct.find_one({"_id": inter.author.id})['—Ç–æ–≤–∞—Ä']
            code_find = dbcode.find_one({"_id": "code"})
            code = code_find['number']
            current_date = datetime.datetime.now()
            due_date = current_date + datetime.timedelta(days=5)
            formatted_date = f"{due_date.day}.{due_date.month:02d}.{due_date.year} {due_date.hour:02d}:{due_date.minute:02d}"
            await inter.channel.edit(name=f'–ó–∞–∫–∞–∑ {code}')
            if skin == '–°–∫–∏–Ω ¬´ Classic ¬ª':
                classic_artist1 = self.bot.get_user(609737656363909151)
                classic_artist2 = self.bot.get_user(937410314100703243)
                random_select_classic = random.choice([classic_artist1, classic_artist2])
                if random_select_classic == classic_artist1:
                    classic = '–ú–∞–∫—Å–∏–º'
                    stars_doc = stars.find_one({"_id": 609737656363909151})
                    rating_find_classic = stars_doc['rating']
                else:
                    classic = '–ú–∏—Ö–∞–∏–ª'
                    stars_doc = stars.find_one({"_id": 937410314100703243})
                    rating_find_classic = stars_doc['rating']
                await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç {classic} `{rating_find_classic}‚≠ê`')
                synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                if synced_thread_doc:
                    source_thread_id = synced_thread_doc["target_thread_id"]
                th = self.bot.get_channel(int(source_thread_id))
                msg = await th.send(random_select_classic.mention, else_artist.mention)
                await msg.delete()
                date = DBdates.find_one({"_id": user.id})
                if date:
                    formatted_date = date['date']
                orders.update_one({"_id": random_select_classic.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –°—Ç–∏–ª—å: Classic —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)
            if skin == '–°–∫–∏–Ω ¬´ Future ¬ª':
                future_artist1 = self.bot.get_user(870550116887564348)
                future_artist2 = self.bot.get_user(987793657723752468)
                random_select_future = random.choice([future_artist1, future_artist2])
                if random_select_future == future_artist1:
                    future = '–ï–ª–Ω—É—Ä'
                    stars_doc = stars.find_one({"_id": 870550116887564348})
                    rating_find_future = stars_doc['rating']
                else:
                    future = '–ê–Ω–¥—Ä–µ–π'
                    stars_doc = stars.find_one({"_id": 987793657723752468})
                    rating_find_future = stars_doc['rating']
                await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç {future} `{rating_find_future}‚≠ê`')
                synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                if synced_thread_doc:
                    source_thread_id = synced_thread_doc["target_thread_id"]
                th = self.bot.get_channel(int(source_thread_id))
                msg = await th.send(random_select_future.mention, else_artist.mention)
                await msg.delete()
                date = DBdates.find_one({"_id": user.id})
                if date:
                    formatted_date = date['date']
                orders.update_one({"_id": random_select_future.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –°—Ç–∏–ª—å: Future —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)
            if skin == '–°–∫–∏–Ω ¬´ Modern ¬ª':
                modern_artist1 = self.bot.get_user(617052770293252109)
                modern_artist2 = self.bot.get_user(728648509334487102)
                random_select_modern = random.choice([modern_artist1, modern_artist2])
                if random_select_modern == modern_artist1:
                    modern = '–ì–ª–µ–±'
                    stars_doc = stars.find_one({"_id": 617052770293252109})
                    rating_find_modern = stars_doc['rating']
                else:
                    modern = '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä'
                    stars_doc = stars.find_one({"_id": 728648509334487102})
                    rating_find_modern = stars_doc['rating']
                await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç {modern} `{rating_find_modern}‚≠ê`')
                synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                if synced_thread_doc:
                    source_thread_id = synced_thread_doc["target_thread_id"]
                th = self.bot.get_channel(int(source_thread_id))
                msg = await th.send(random_select_modern.mention, else_artist.mention)
                await msg.delete()
                date = DBdates.find_one({"_id": user.id})
                if date:
                    formatted_date = date['date']
                orders.update_one({"_id": random_select_modern.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –°—Ç–∏–ª—å: Modern —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)
            if skin == '–ê–≤–∞—Ç–∞—Ä':
                else_artist = self.bot.get_user(986815186629455902)
                stars_doc = stars.find_one({"_id": 986815186629455902})
                rating_nest = stars_doc['rating']
                await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ù–µ—Å—Ç `{rating_nest}‚≠ê`')
                synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                if synced_thread_doc:
                    source_thread_id = synced_thread_doc["target_thread_id"]
                th = self.bot.get_channel(int(source_thread_id))
                msg = await th.send(else_artist.mention)
                await msg.delete()
                date = DBdates.find_one({"_id": user.id})
                if date:
                    formatted_date = date['date']
                orders.update_one({"_id": else_artist.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –¢–æ–≤–∞—Ä: –ê–≤–∞—Ç–∞—Ä —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)
            if skin == '–¢–æ—Ç–µ–º':
                else_artist = self.bot.get_user(986815186629455902)
                stars_doc = stars.find_one({"_id": 986815186629455902})
                rating_nest = stars_doc['rating']
                await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ù–µ—Å—Ç `{rating_nest}‚≠ê`')
                synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                if synced_thread_doc:
                    source_thread_id = synced_thread_doc["target_thread_id"]
                th = self.bot.get_channel(int(source_thread_id))
                msg = await th.send(else_artist.mention)
                await msg.delete()
                date = DBdates.find_one({"_id": user.id})
                if date:
                    formatted_date = date['date']
                orders.update_one({"_id": else_artist.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –¢–æ–≤–∞—Ä: –¢–æ—Ç–µ–º —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)
            if skin == 'GIF-–ê–≤–∞—Ç–∞—Ä':
                else_artist = self.bot.get_user(986815186629455902)
                stars_doc = stars.find_one({"_id": 986815186629455902})
                rating_nest = stars_doc['rating']
                await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ù–µ—Å—Ç `{rating_nest}‚≠ê`')
                synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                if synced_thread_doc:
                    source_thread_id = synced_thread_doc["target_thread_id"]
                th = self.bot.get_channel(int(source_thread_id))
                msg = await th.send(else_artist.mention)
                await msg.delete()
                date = DBdates.find_one({"_id": user.id})
                if date:
                    formatted_date = date['date']
                orders.update_one({"_id": else_artist.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –¢–æ–≤–∞—Ä: GIF-–ê–≤–∞—Ç–∞—Ä —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)
            if skin == '–ü–ª–∞—â':
                else_artist = self.bot.get_user(986815186629455902)
                stars_doc = stars.find_one({"_id": 986815186629455902})
                rating_nest = stars_doc['rating']
                await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ù–µ—Å—Ç `{rating_nest}‚≠ê`')
                synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                if synced_thread_doc:
                    source_thread_id = synced_thread_doc["target_thread_id"]
                th = self.bot.get_channel(int(source_thread_id))
                msg = await th.send(else_artist.mention)
                await msg.delete()
                date = DBdates.find_one({"_id": user.id})
                if date:
                    formatted_date = date['date']
                orders.update_one({"_id": else_artist.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –¢–æ–≤–∞—Ä: –ü–ª–∞—â —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)
            synced_thread = synced_threads.find_one({"source_thread_id": inter.channel.id})
            if synced_thread:
                target_thread_id = synced_thread["target_thread_id"]
                chl = self.bot.get_channel(int(target_thread_id))
                await chl.edit(name=f'–ó–∞–∫–∞–∑ {code}')
            dbcode.update_one({"_id": "code"}, {"$inc": {"number": 1}})

            
            

    @commands.Cog.listener()
    async def on_button_click(self, inter):
        if inter.component.custom_id == 'check':
            base_doc = qiwi_base.find_one({"_id": inter.author.id})
            if base_doc is not None:
                bill_id = base_doc['bill_id']
                check_p2p = await p2p.get_bill_status(bill_id=bill_id)
                if check_p2p == 'PAID':
                    try:
                        await inter.author.add_roles(inter.author.guild.get_role(989527992109789218))
                        await inter.author.send("–ü—Ä–∏–≤–µ—Ç! –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–≤–æ–∏–º –∑–∞–∫–∞–∑–æ–º ü•≥\nüëâ –ê —á—Ç–æ –±—ã –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–µ –∫–∞–∑–∞–ª–æ—Å—å –¥–æ–ª–≥–∏–º ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —á–∞—Ç (<#989528054441328720>)!")
                    except:
                        pass
                    await inter.response.defer()
                    await inter.channel.send(embed=disnake.Embed(description='–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–ú—ã –ø—Ä–∏–Ω—è–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.', color=0x52FF00))
                    skin = DBproduct.find_one({"_id": inter.author.id})['—Ç–æ–≤–∞—Ä']
                    code_find = dbcode.find_one({"_id": "code"})
                    code = code_find['number']
                    current_date = datetime.datetime.now()
                    due_date = current_date + datetime.timedelta(days=5)
                    formatted_date = f"{due_date.day}.{due_date.month:02d}.{due_date.year} {due_date.hour:02d}:{due_date.minute:02d}"
                    await inter.channel.edit(name=f'–ó–∞–∫–∞–∑ {code}')
                    if skin == '–°–∫–∏–Ω ¬´ Classic ¬ª':
                        classic_artist1 = self.bot.get_user(609737656363909151)
                        classic_artist2 = self.bot.get_user(937410314100703243)
                        random_select_classic = random.choice([classic_artist1, classic_artist2])
                        if random_select_classic == classic_artist1:
                            classic = '–ú–∞–∫—Å–∏–º'
                            stars_doc = stars.find_one({"_id": 609737656363909151})
                            rating_find_classic = stars_doc['rating']
                        else:
                            classic = '–ú–∏—Ö–∞–∏–ª'
                            stars_doc = stars.find_one({"_id": 937410314100703243})
                            rating_find_classic = stars_doc['rating']
                        await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç {classic} `{rating_find_classic}‚≠ê`')
                        synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                        if synced_thread_doc:
                            source_thread_id = synced_thread_doc["target_thread_id"]
                        th = self.bot.get_channel(int(source_thread_id))
                        msg = await th.send(random_select_classic.mention, else_artist.mention)
                        await msg.delete()
                        date = DBdates.find_one({"_id": inter.author.id})
                        if date:
                            formatted_date = date['date']
                        orders.update_one({"_id": random_select_classic.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –°—Ç–∏–ª—å: Classic —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)
                    if skin == '–°–∫–∏–Ω ¬´ Future ¬ª':
                        future_artist1 = self.bot.get_user(870550116887564348)
                        future_artist2 = self.bot.get_user(987793657723752468)
                        random_select_future = random.choice([future_artist1, future_artist2])
                        if random_select_future == future_artist1:
                            future = '–ï–ª–Ω—É—Ä'
                            stars_doc = stars.find_one({"_id": 870550116887564348})
                            rating_find_future = stars_doc['rating']
                        else:
                            future = '–ê–Ω–¥—Ä–µ–π'
                            stars_doc = stars.find_one({"_id": 987793657723752468})
                            rating_find_future = stars_doc['rating']
                        await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç {future} `{rating_find_future}‚≠ê`')
                        synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                        if synced_thread_doc:
                            source_thread_id = synced_thread_doc["target_thread_id"]
                        th = self.bot.get_channel(int(source_thread_id))
                        msg = await th.send(random_select_future.mention, else_artist.mention)
                        await msg.delete()
                        date = DBdates.find_one({"_id": inter.author.id})
                        if date:
                            formatted_date = date['date']
                        orders.update_one({"_id": random_select_future.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –°—Ç–∏–ª—å: Future —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)
                    if skin == '–°–∫–∏–Ω ¬´ Modern ¬ª':
                        modern_artist1 = self.bot.get_user(617052770293252109)
                        modern_artist2 = self.bot.get_user(728648509334487102)
                        random_select_modern = random.choice([modern_artist1, modern_artist2])
                        if random_select_modern == modern_artist1:
                            modern = '–ì–ª–µ–±'
                            stars_doc = stars.find_one({"_id": 617052770293252109})
                            rating_find_modern = stars_doc['rating']
                        else:
                            modern = '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä'
                            stars_doc = stars.find_one({"_id": 728648509334487102})
                            rating_find_modern = stars_doc['rating']
                        await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç {modern} `{rating_find_modern}‚≠ê`')
                        synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                        if synced_thread_doc:
                            source_thread_id = synced_thread_doc["target_thread_id"]
                        th = self.bot.get_channel(int(source_thread_id))
                        msg = await th.send(random_select_modern.mention, else_artist.mention)
                        await msg.delete()
                        date = DBdates.find_one({"_id": inter.author.id})
                        if date:
                            formatted_date = date['date']
                        orders.update_one({"_id": random_select_modern.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –°—Ç–∏–ª—å: Modern —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)
                    if skin == '–ê–≤–∞—Ç–∞—Ä':
                        else_artist = self.bot.get_user(986815186629455902)
                        stars_doc = stars.find_one({"_id": 986815186629455902})
                        rating_nest = stars_doc['rating']
                        await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ù–µ—Å—Ç `{rating_nest}‚≠ê`')
                        synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                        if synced_thread_doc:
                            source_thread_id = synced_thread_doc["target_thread_id"]
                        th = self.bot.get_channel(int(source_thread_id))
                        msg = await th.send(else_artist.mention)
                        await msg.delete()
                        date = DBdates.find_one({"_id": inter.author.id})
                        if date:
                            formatted_date = date['date']
                        orders.update_one({"_id": else_artist.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –¢–æ–≤–∞—Ä: –ê–≤–∞—Ç–∞—Ä —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)
                    if skin == '–¢–æ—Ç–µ–º':
                        else_artist = self.bot.get_user(986815186629455902)
                        stars_doc = stars.find_one({"_id": 986815186629455902})
                        rating_nest = stars_doc['rating']
                        await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ù–µ—Å—Ç `{rating_nest}‚≠ê`')
                        synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                        if synced_thread_doc:
                            source_thread_id = synced_thread_doc["target_thread_id"]
                        th = self.bot.get_channel(int(source_thread_id))
                        msg = await th.send(else_artist.mention)
                        await msg.delete()
                        date = DBdates.find_one({"_id": inter.author.id})
                        if date:
                            formatted_date = date['date']
                        orders.update_one({"_id": else_artist.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –¢–æ–≤–∞—Ä: –¢–æ—Ç–µ–º —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)
                    if skin == 'GIF-–ê–≤–∞—Ç–∞—Ä':
                        else_artist = self.bot.get_user(986815186629455902)
                        stars_doc = stars.find_one({"_id": 986815186629455902})
                        rating_nest = stars_doc['rating']
                        await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ù–µ—Å—Ç `{rating_nest}‚≠ê`')
                        synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                        if synced_thread_doc:
                            source_thread_id = synced_thread_doc["target_thread_id"]
                        th = self.bot.get_channel(int(source_thread_id))
                        msg = await th.send(else_artist.mention)
                        await msg.delete()
                        date = DBdates.find_one({"_id": inter.author.id})
                        if date:
                            formatted_date = date['date']
                        orders.update_one({"_id": else_artist.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –¢–æ–≤–∞—Ä: GIF-–ê–≤–∞—Ç–∞—Ä —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)
                    if skin == '–ü–ª–∞—â':
                        else_artist = self.bot.get_user(986815186629455902)
                        stars_doc = stars.find_one({"_id": 986815186629455902})
                        rating_nest = stars_doc['rating']
                        await inter.channel.send(f'–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ù–µ—Å—Ç `{rating_nest}‚≠ê`')
                        synced_thread_doc = synced_threads.find_one({"source_thread_id": inter.channel.id}) 
                        if synced_thread_doc:
                            source_thread_id = synced_thread_doc["target_thread_id"]
                        th = self.bot.get_channel(int(source_thread_id))
                        msg = await th.send(else_artist.mention)
                        await msg.delete()
                        date = DBdates.find_one({"_id": inter.author.id})
                        if date:
                            formatted_date = date['date']
                        orders.update_one({"_id": else_artist.id}, {"$push": {'orders': f'#{code}: ‚Ä¢ –¢–æ–≤–∞—Ä: –ü–ª–∞—â —Å–¥–∞—Ç—å –¥–æ {formatted_date}'}}, upsert=True)

                    synced_thread = synced_threads.find_one({"source_thread_id": inter.channel.id})
                    if synced_thread:
                        target_thread_id = synced_thread["target_thread_id"]
                        chl = self.bot.get_channel(int(target_thread_id))
                        await chl.edit(name=f'–ó–∞–∫–∞–∑ {code}')
                    dbcode.update_one({"_id": "code"}, {"$inc": {"number": 1}})

                    qiwi_base.delete_one({"_id": inter.author.id})
                if check_p2p == 'WAITING':
                    await inter.send('–£–ø—Å! –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ï—Å–ª–∏ –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.', ephemeral=True)
                if check_p2p == 'REJECTED':
                    await inter.send('–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!', ephemeral=True)
            else:
                await inter.send('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.', ephemeral=True)

        if inter.component.custom_id.startswith('closeorder:'):
            user_id = inter.component.custom_id.split(':')[1]
            channel = inter.guild.get_channel(1126112940903366707)
            if inter.author.id in [609737656363909151,937410314100703243,870550116887564348,987793657723752468,617052770293252109,728648509334487102]:
                await inter.send(embed=disnake.Embed(title="–û—à–∏–±–∫–∞", description='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑  <:MarkNo2:1055609056343113955>', color=disnake.Color.red()), ephemeral=True)
            else:
                await inter.send(f'–ü—Ä–æ—Å–∏–º –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞—à–µ–º—É —Ö—É–¥–æ–∂–Ω–∏–∫—É!', components=[disnake.ui.Button(label='1', emoji='‚≠ê', custom_id=f'star1:{user_id}'),
                                                                                           disnake.ui.Button(label='2', emoji='‚≠ê', custom_id=f'star2:{user_id}'), 
                                                                                           disnake.ui.Button(label='3', emoji='‚≠ê', custom_id=f'star3:{user_id}'), 
                                                                                           disnake.ui.Button(label='4', emoji='‚≠ê', custom_id=f'star4:{user_id}'), 
                                                                                           disnake.ui.Button(label='5', emoji='‚≠ê', custom_id=f'star5:{user_id}')])

        if inter.component.custom_id == 'zkbt':
            cd_mapping = commands.CooldownMapping.from_cooldown(1, 10, BucketType.user)
            bucket = cd_mapping.get_bucket(inter)
            retry_after = bucket.update_rate_limit()
            if retry_after:
                await inter.response.send_message(embed=disnake.Embed(title='–û—à–∏–±–∫–∞', description = f"**–ù–∞–∂–º–∏—Ç–µ —á–µ—Ä–µ–∑ {int(retry_after)} —Å–µ–∫—É–Ω–¥!**", color=disnake.Color.red()), ephemeral=True)
                return
            await inter.response.defer()        
            channel = inter.guild.get_channel(1126113100928663562)
            existing_thread = disnake.utils.get(channel.threads, name=f'–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ({inter.author.name})')
            if existing_thread is not None:
                await existing_thread.delete()
            thread = await channel.create_thread(name=f'–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ({inter.author.name})', type=disnake.ChannelType.private_thread)
            embed = disnake.Embed(title='–í—ã–±–æ—Ä —É—Å–ª—É–≥–∏', description='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.')
            nest = inter.bot.get_user(986815186629455902) 
            xikon = inter.bot.get_user(768075509480292383)
            await thread.send(embed=embed, view=Products())
            msg = await thread.send(f"{inter.author.mention} {nest.mention} {xikon.mention} ")
            await msg.delete()
            active_threads.update_one({'_id': 'count'}, {'$inc': {'threads': 1}}, upsert=True)
            await inter.send(f'üëâ –í–∞—à –∑–∞–∫–∞–∑ —Ç—É—Ç ‚Äî **{thread.mention}**', ephemeral=True)


        if inter.component.custom_id.startswith('star'):
            if int(inter.author.id) in self.rating:
                await inter.send('–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–º—É —Ö—É–¥–æ–∂–Ω–∏–∫—É!', ephemeral=True)
            else:
                if inter.author.id not in [609737656363909151,937410314100703243,870550116887564348,987793657723752468,617052770293252109,728648509334487102]:
                    user_id = inter.component.custom_id.split(':')[1]
                    stars_doc = stars.find_one({"_id": int(user_id)})
                    if stars_doc is not None:
                        stars_marks = list(stars_doc['marks'])
                    else:
                        stars.insert_one({"_id": int(user_id), "marks": [5], "rating": 5})
                    chan = self.bot.get_channel(1126112940903366707)
                    self.rating[int(inter.author.id)] = True
                    if inter.component.custom_id.startswith('star1'):
                        await inter.message.edit(components=[disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True)])
                        await inter.send(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –∫–∞–Ω–∞–ª–µ - {chan.mention}', ephemeral=True)
                        stars_marks.append(1)
                    if inter.component.custom_id.startswith('star2'):
                        await inter.message.edit(components=[disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True)])
                        await inter.send(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –∫–∞–Ω–∞–ª–µ - {chan.mention}', ephemeral=True)
                        stars_marks.append(2)
                    if inter.component.custom_id.startswith('star3'):
                        await inter.message.edit(components=[disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True)])
                        await inter.send(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –∫–∞–Ω–∞–ª–µ - {chan.mention}', ephemeral=True)
                        stars_marks.append(3)
                    if inter.component.custom_id.startswith('star4'):
                        await inter.message.edit(components=[disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True)])
                        await inter.send(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –∫–∞–Ω–∞–ª–µ - {chan.mention}', ephemeral=True)
                        stars_marks.append(4)
                    if inter.component.custom_id.startswith('star5'):
                        await inter.message.edit(components=[disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True), disnake.ui.Button(emoji='‚≠ê', disabled=True)])
                        await inter.send(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ –∫–∞–Ω–∞–ª–µ - {chan.mention}', ephemeral=True)
                        stars_marks.append(5)
                    updated_rating = round(sum(stars_marks) / len(stars_marks), 1)
                    stars.update_many({"_id": int(user_id)}, {"$set": {"marks": stars_marks, "rating": updated_rating}}, upsert=True)
                    active_threads.update_one({"_id": "count"}, {"$inc": {"threads": -1}}, upsert=True)
                    await asyncio.sleep(10)
                    await inter.channel.delete()
                    del self.rating[int(inter.author.id)]
                    if int(user_id) == 986815186629455902:
                        product_find = DBproduct.find_one({"_id": inter.author.id})['—Ç–æ–≤–∞—Ä']
                        if product_find == '–ü–ª–∞—â':
                            painter.update_many({"_id": 986815186629455902}, {"$inc": {"getprice": 50, "zakazs": 1}}, upsert=True)
                        if product_find == '–¢–æ—Ç–µ–º':
                            painter.update_many({"_id": 986815186629455902}, {"$inc": {"getprice": 25, "zakazs": 1}}, upsert=True)
                        if product_find == '–ê–≤–∞—Ç–∞—Ä':
                            painter.update_many({"_id": 986815186629455902}, {"$inc": {"getprice": 40, "zakazs": 1}}, upsert=True)
                        if product_find == 'GIF-–ê–≤–∞—Ç–∞—Ä':
                            painter.update_many({"_id": 986815186629455902}, {"$inc": {"getprice": 110, "zakazs": 1}}, upsert=True)
                    else:
                        painter.update_many({"_id": int(user_id)}, {"$inc": {"getprice": 70, "zakazs": 1}}, upsert=True)
                    servers.update_one({"_id": "count"}, {"$inc": {"zakaz": 1}}, upsert=True)
                    synced_thread = synced_threads.find_one({"source_thread_id": inter.channel.id})
                    if synced_thread:
                        target_id = synced_thread['target_thread_id']
                        th = self.bot.get_channel(int(target_id))
                        await th.delete()
                        synced_threads.delete_one({"source_thread_id": inter.channel.id})
                else:
                    await inter.send(embed=disnake.Embed(title="–û—à–∏–±–∫–∞", description='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ!  <:MarkNo2:1055609056343113955>', color=disnake.Color.red()), ephemeral=True)

def setup(bot):
    bot.add_cog(Navigation(bot))
